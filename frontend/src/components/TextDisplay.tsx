import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Paper,\n  Typography,\n  Button,\n  CircularProgress,\n  Alert,\n  Divider,\n  IconButton,\n  Tooltip\n} from '@mui/material';\nimport {\n  Translate,\n  VolumeUp,\n  Refresh,\n  PlayArrow\n} from '@mui/icons-material';\nimport { useQuery, useMutation } from 'react-query';\n\nimport { ChapterInfo } from '../types/book';\nimport { epubAPI, translationAPI, ttsAPI } from '../services/api';\nimport { useBookStore } from '../store/bookStore';\n\ninterface TextDisplayProps {\n  bookId: string;\n  chapter: ChapterInfo;\n}\n\nconst TextDisplay: React.FC<TextDisplayProps> = ({ bookId, chapter }) => {\n  const {\n    originalText,\n    translatedText,\n    isTranslating,\n    isGeneratingAudio,\n    setOriginalText,\n    setTranslatedText,\n    setTranslating,\n    setGeneratingAudio,\n    setAudioUrl\n  } = useBookStore();\n\n  const [translationTaskId, setTranslationTaskId] = useState<string | null>(null);\n  const [audioTaskId, setAudioTaskId] = useState<string | null>(null);\n  const [highlightedText, setHighlightedText] = useState<string>('');\n\n  // 获取原文内容\n  const { data: chapterContent, isLoading } = useQuery(\n    ['chapterContent', bookId, chapter.id],\n    () => epubAPI.getChapterContent(bookId, chapter.id),\n    {\n      onSuccess: (content) => {\n        setOriginalText(content);\n      }\n    }\n  );\n\n  // 翻译章节\n  const translateMutation = useMutation(\n    () => translationAPI.translateChapter(bookId, chapter.id),\n    {\n      onSuccess: (taskId) => {\n        setTranslationTaskId(taskId);\n        setTranslating(true);\n      },\n      onError: (error) => {\n        console.error('Translation failed:', error);\n        setTranslating(false);\n      }\n    }\n  );\n\n  // 生成音频\n  const generateAudioMutation = useMutation(\n    (translationId: string) => \n      ttsAPI.generateChapterAudio(bookId, chapter.id, translationId),\n    {\n      onSuccess: (taskId) => {\n        setAudioTaskId(taskId);\n        setGeneratingAudio(true);\n      },\n      onError: (error) => {\n        console.error('Audio generation failed:', error);\n        setGeneratingAudio(false);\n      }\n    }\n  );\n\n  // 轮询翻译状态\n  useQuery(\n    ['translationStatus', translationTaskId],\n    () => translationAPI.getTranslationStatus(translationTaskId!),\n    {\n      enabled: !!translationTaskId && isTranslating,\n      refetchInterval: 2000,\n      onSuccess: (status) => {\n        if (status.status === 'completed') {\n          // 这里应该获取翻译结果，简化处理\n          setTranslatedText('翻译已完成，请刷新查看结果'); // 实际应该调用API获取结果\n          setTranslating(false);\n          setTranslationTaskId(null);\n        } else if (status.status === 'failed') {\n          setTranslating(false);\n          setTranslationTaskId(null);\n        }\n      }\n    }\n  );\n\n  // 轮询音频生成状态\n  useQuery(\n    ['audioStatus', audioTaskId],\n    () => ttsAPI.getAudioStatus(audioTaskId!),\n    {\n      enabled: !!audioTaskId && isGeneratingAudio,\n      refetchInterval: 3000,\n      onSuccess: (status) => {\n        if (status.status === 'completed' && status.audio_url) {\n          setAudioUrl(status.audio_url);\n          setGeneratingAudio(false);\n          setAudioTaskId(null);\n        } else if (status.status === 'failed') {\n          setGeneratingAudio(false);\n          setAudioTaskId(null);\n        }\n      }\n    }\n  );\n\n  const handleTranslate = () => {\n    if (!isTranslating) {\n      translateMutation.mutate();\n    }\n  };\n\n  const handleGenerateAudio = () => {\n    if (translationTaskId && !isGeneratingAudio) {\n      generateAudioMutation.mutate(translationTaskId);\n    }\n  };\n\n  const highlightTextSegment = (text: string, highlight: string) => {\n    if (!highlight) return text;\n    \n    const parts = text.split(new RegExp(`(${highlight})`, 'gi'));\n    return parts.map((part, index) => \n      part.toLowerCase() === highlight.toLowerCase() ? (\n        <span key={index} style={{ \n          backgroundColor: '#ffeb3b', \n          padding: '2px 4px',\n          borderRadius: '4px' \n        }}>\n          {part}\n        </span>\n      ) : part\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column', p: 2 }}>\n      {/* 章节标题和操作按钮 */}\n      <Paper elevation={1} sx={{ p: 2, mb: 2 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h6\" component=\"h2\">\n            {chapter.title}\n          </Typography>\n          \n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Tooltip title=\"翻译章节\">\n              <Button\n                variant=\"outlined\"\n                startIcon={isTranslating ? <CircularProgress size={16} /> : <Translate />}\n                onClick={handleTranslate}\n                disabled={isTranslating}\n                size=\"small\"\n              >\n                {isTranslating ? '翻译中...' : '翻译'}\n              </Button>\n            </Tooltip>\n            \n            <Tooltip title=\"生成语音\">\n              <Button\n                variant=\"outlined\"\n                startIcon={isGeneratingAudio ? <CircularProgress size={16} /> : <VolumeUp />}\n                onClick={handleGenerateAudio}\n                disabled={!translatedText || isGeneratingAudio}\n                size=\"small\"\n              >\n                {isGeneratingAudio ? '生成中...' : '生成语音'}\n              </Button>\n            </Tooltip>\n          </Box>\n        </Box>\n        \n        {translateMutation.isError && (\n          <Alert severity=\"error\" sx={{ mb: 1 }}>\n            翻译失败，请重试\n          </Alert>\n        )}\n        \n        {generateAudioMutation.isError && (\n          <Alert severity=\"error\" sx={{ mb: 1 }}>\n            音频生成失败，请重试\n          </Alert>\n        )}\n      </Paper>\n\n      {/* 双栏文本显示 */}\n      <Box sx={{ flexGrow: 1, overflow: 'hidden' }}>\n        <Grid container spacing={2} sx={{ height: '100%' }}>\n          {/* 原文栏 */}\n          <Grid item xs={12} md={6} sx={{ height: '100%' }}>\n            <Paper \n              elevation={2} \n              sx={{ \n                height: '100%', \n                display: 'flex', \n                flexDirection: 'column',\n                overflow: 'hidden'\n              }}\n            >\n              <Box sx={{ p: 2, bgcolor: 'primary.main', color: 'primary.contrastText' }}>\n                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                  🇺🇸 原文 (English)\n                </Typography>\n              </Box>\n              \n              <Box sx={{ \n                flexGrow: 1, \n                p: 2, \n                overflow: 'auto',\n                fontSize: '0.95rem',\n                lineHeight: 1.6\n              }}>\n                <Typography \n                  variant=\"body1\" \n                  component=\"div\"\n                  sx={{ whiteSpace: 'pre-wrap' }}\n                >\n                  {highlightTextSegment(originalText, highlightedText)}\n                </Typography>\n              </Box>\n            </Paper>\n          </Grid>\n\n          {/* 译文栏 */}\n          <Grid item xs={12} md={6} sx={{ height: '100%' }}>\n            <Paper \n              elevation={2} \n              sx={{ \n                height: '100%', \n                display: 'flex', \n                flexDirection: 'column',\n                overflow: 'hidden'\n              }}\n            >\n              <Box sx={{ p: 2, bgcolor: 'secondary.main', color: 'secondary.contrastText' }}>\n                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                  🇨🇳 译文 (中文)\n                </Typography>\n              </Box>\n              \n              <Box sx={{ \n                flexGrow: 1, \n                p: 2, \n                overflow: 'auto',\n                fontSize: '1rem',\n                lineHeight: 1.8\n              }}>\n                {translatedText ? (\n                  <Typography \n                    variant=\"body1\" \n                    component=\"div\"\n                    sx={{ whiteSpace: 'pre-wrap' }}\n                  >\n                    {highlightTextSegment(translatedText, highlightedText)}\n                  </Typography>\n                ) : (\n                  <Box sx={{ \n                    display: 'flex', \n                    flexDirection: 'column',\n                    alignItems: 'center', \n                    justifyContent: 'center',\n                    height: '100%',\n                    color: 'text.secondary'\n                  }}>\n                    <Translate sx={{ fontSize: 48, mb: 2, opacity: 0.5 }} />\n                    <Typography variant=\"body1\" align=\"center\">\n                      点击上方\"翻译\"按钮开始翻译章节\n                    </Typography>\n                  </Box>\n                )}\n              </Box>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Box>\n    </Box>\n  );\n};\n\nexport default TextDisplay;